---
- hosts: all
  connection: "{{ connection | default('ssh') }}"  # So we can use 'local' for localhost

  vars:
    # As of Aug 2023. See https://www.hashicorp.com/official-packaging-guide
    hashicorp_key_fingerprint: 798AEC654E5C15428C8E42EEAA16FCBCA621E701


  tasks:

  # Folder structure
  # ================
  - name: Create bin folder for user
    file:
      path: /home/{{ ansible_user }}/bin
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'

  - name: Create config folder for user. Add mypy subfolder. Todo - Add others.
    file:
      path: /home/{{ ansible_user }}/.config/mypy/
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'


  # Install Packages
  # ================

  - name: Upgrade all apt packages
    become: true
    apt:
      update_cache=yes
      cache_valid_time=3600
      force_apt_get=yes

  # Python
  # ------

  # Convention is to use this repo, since apt does not have all current python versions
  - name: Add Python repository from PPA and install its signing key on Ubuntu target
    apt_repository:
      repo: ppa:deadsnakes/ppa
      state: present

  - name: install all current versions of Python.
    become: true
    apt:
      name:
        # See here how Python is broken up into multiple packages: https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
        # I.e., even DeadSnakes repo follows Debian's convention of having multiple packages for each Python version.
        - "python{{ item }}-dev"
        - "python{{ item }}-venv"
        - "python{{ item }}-distutils"
        ## To fix dependency issues (problems using pip/pipenv/pipinstall)
        - "python3-six"
        # https://gist.github.com/y56/0540d22a1db40dacc7fbbb93c866821e
        - "python3-testresources"
      state: latest
    loop:
      # 3.8 is oldest version that still receives security support, as of Aug 2023. Remove Oct 2024.
      - "3.8"
      - "3.9"
      - "3.10"
      - "3.11"
      - "3.12"

  # Docker
  # ------
  # See https://docs.docker.com/engine/install/ubuntu/
  # Note that this is usually not necessary on WSL if you have Docker Desktop installed.
  # However, this alternative can still be useful on WSL, since DocKer DesKtop is no longer
  # free for commercial usage in most cases.

  - name: Install docker's official GPG key
    become:
    shell: >
      wget -O- https://download.docker.com/linux/ubuntu/gpg
      | gpg --dearmor
      > /usr/share/keyrings/docker.gpg

  - name: Get Ubuntu codename (for repository repository)
    shell: lsb_release -cs
    register: ubuntu_codename

  - name: Install docker repository
    apt_repository:
      repo: >
        deb [signed-by=/usr/share/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable
      state: present
    # when: docker_key_fingerprint_verified.rc == 0  # Just in case
    register: docker_repository_installed

  - name: Uninstall *unofficial* Docker distribution from APT iff Docker repo was newly added
    become: true
    apt:
      name:
        - docker.io
        - docker-compose
        - docker.doc
        - podman-docker
        - containerd
        - containerd.io
        - runc
      state: absent
    when: docker_repository_installed.changed

  - name: Install docker
    become: true
    apt:
      update_cache: yes
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
      state: latest

  - name: Add default user to `docker` group, so we can use docker w/o sudo
    become: true
    user:
      name: "{{ ansible_user }}"
      groups: "{{ ansible_user }},docker"

  # Other APT packages
  # ------------------
  - name: install other common packages
    become: true
    apt:
      name:
        - unzip
        - gnupg
        - software-properties-common
        - curl
      state: latest


  # AWS CLI
  # -------
  - name: Make sure we don't have v1 of AWS CLI installed
    become: true
    apt:
      name:
        - awscli
      state: absent

  - name: Download AWS CLI v2, if it's not already downloaded
    unarchive:
      src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
      dest: /home/{{ ansible_user }}/bin/
      # `creates` makes sure download is skipped if folder already exists
      creates: /home/{{ ansible_user }}/bin/aws/
      remote_src: yes
    register: aws_cli_download

  - name: Install AWS CLI v2, if it was downloaded
    become: true
    # Using the `update` flag so install does not fail in case it has been installed outside of Ansible.
    shell: bash /home/{{ ansible_user }}/bin/aws/install --update
    when: aws_cli_download.changed


  # Terraform
  # ---------
  - name: Install Hashicorp GPG key
    become: true
    shell: >
      wget -O- https://apt.releases.hashicorp.com/gpg
      | gpg --dearmor
      > /usr/share/keyrings/hashicorp-archive-keyring.gpg

  - name: Verify key fingerprint
    shell: >
      gpg --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --list-keys
      | grep -q {{ hashicorp_key_fingerprint }}
    # Note that grep fails with rc=1 if no match is found
    register: hashicorp_key_fingerprint_verified

  - name: Get Ubuntu codename (for Hashicorp repository)
    shell: lsb_release -cs
    register: ubuntu_codename

  - name: Install Hashicorp repository
    apt_repository:
      repo: >
        deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg]
          https://apt.releases.hashicorp.com {{ ubuntu_codename.stdout }} main
      state: present
    when: hashicorp_key_fingerprint_verified.rc == 0  # Just in case

  - name: Install Terraform
    become: true
    apt:
      update_cache: yes
      name:
        - terraform
      state: latest


# todo:
# - copy dotfiles (incl mypy, pylint, etc)
# - Install python packages that should go into main environment: mypy, black, pipenv, poetry, pandas-stubs. Use  install --user pipenv ?
# - pip install --upgrade pip?
# - pypy --install-types?
