---
- hosts: all
  connection: "{{ connection | default('ssh') }}"  # So we can use 'local' for localhost

  vars:
    global_python_version: "3.10"  # Which version of Python ASDF should set as default

  tasks:

  - name: Log ansible user (should not be `root`)
    debug:
      msg: "ansible user: {{ ansible_user }}"

  - name: Log user (should not be `root`)
    shell: echo $(whoami)
    args:
      executable: /bin/bash


  # Folder structure
  # ================
  - name: Create bin folder for user
    file:
      path: /home/{{ ansible_user }}/bin
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'

  - name: Create .local/bin folder for user
    file:
      path: /home/{{ ansible_user }}/.local/bin
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'

  - name: Create config folder for user. Add mypy subfolder. Todo - Add others.
    file:
      path: /home/{{ ansible_user }}/.config/mypy/
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'

  - name: Create shared folder for ASDF
    file:
      path: /home/{{ ansible_user }}/.asdf
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'


  # Copy config files
  # =================
  # Shell
  # -----
  - name:  Copy shell dotfiles from this repo to user's home folder
    copy:
      src: ../shell-dotfiles/
      remote_src: false  # Copy from control node
      dest: "/home/{{ ansible_user }}/"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      backup: yes  # Will be in same directory as src file

  - name: Copy scripts into folder in path
    copy:
      src: ../scripts
      remote_src: false  # Copy from control node
      dest: "/home/{{ ansible_user }}/.local/bin/"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'

  # Python
  # ------
  - name: Pylint config
    copy:
      src: ../python/.pylintrc
      remote_src: false  # Copy from control node
      dest: "/home/{{ ansible_user }}/"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      backup: yes  # Will be in same directory as src file

  - name: Mypy config
    copy:
      src: ../python/mypy.ini
      remote_src: false  # Copy from control node
      dest: "/home/{{ ansible_user }}/.config/mypy/"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'
      backup: yes  # Will be in same directory as src file

  # Install Packages
  # ================

  - name: Update apt cache
    become: true
    apt:
      update_cache=yes
      cache_valid_time=3600
      force_apt_get=yes  # Use apt, not aptitude
    # no_log: true

  - name: Update all APT packages to latest version
    become: true
    apt:
      name: "*"
      state: latest
    # no_log: true

  - name: Get ASDF (used for installing Python and Terraform)
    git:
      repo: https://github.com/asdf-vm/asdf.git
      dest: /home/{{ ansible_user }}/.local/bin/asdf
      version: v0.13.1
      update: false  # Don't update if repo has already been cloned
    register: asdf_downloaded  # Whether repo has been cloned


  # Python
  # ------
  - name: Install prerequisites for compiling Python
    apt:
      name:
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev
      state: latest
    no_log: true

  - name: Add ASDF plugin for python
    become: true
    become_user: "{{ ansible_user }}"
    shell: |
      source /home/{{ ansible_user }}/.local/bin/asdf/asdf.sh &&
      asdf plugin-add python
    args:
      executable: /bin/bash

  # Todo: look into how to uninstall old minor versions, if installing newer one.
  - name: Install Python
    become: true
    become_user: "{{ ansible_user }}"
    shell: |
      source /home/{{ ansible_user }}/.local/bin/asdf/asdf.sh
      asdf install python latest:{{ item }}
      echo $(whoami)
    loop:
      # 3.8 is oldest version that still receives security support, as of Aug 2023. Remove Oct 2024.
      - "3.8"
      - "3.9"
      - "3.10"
      - "3.11"
      - "3.12"
    args:
      executable: /bin/bash

  - name: Set default version for Python
    become: true
    become_user: "{{ ansible_user }}"
    shell: |
      source /home/{{ ansible_user }}/.local/bin/asdf/asdf.sh
      asdf global python system
    args:
      executable: /bin/bash


  # Java
  # ----
  - name: Install dependencies
    apt:
      name:
        - curl
        - coreutils
        - unzip
        - jq

  - name: Install Java
    become: true
    become_user: "{{ ansible_user }}"
    shell: |
      source /home/{{ ansible_user }}/.local/bin/asdf/asdf.sh
      asdf plugin-add java
      asdf install java latest:openjdk-11
      asdf global java latest:openjdk-11
    args:
      executable: /bin/bash


  # Terraform
  # ---------

  - name: Make sure Terraform is not install through APT
    become: true
    apt:
      update_cache: yes
      name:
        - terraform
      state: absent

  - name: Install Terraform through ASDF
    become: true
    become_user: "{{ ansible_user }}"
    shell: |
      source /home/{{ ansible_user }}/.local/bin/asdf/asdf.sh
      asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git
      asdf install terraform latest:1.6
      asdf global terraform latest:1.6
    args:
      executable: /bin/bash


  # Docker
  # ------
  # See https://docs.docker.com/engine/install/ubuntu/
  # Note that this is usually not necessary on WSL iff you have Docker Desktop installed.
  # However, this alternative can still be useful on WSL, since DocKer DesKtop is no longer
  # free for commercial usage in most cases.

  - name: Install docker's official GPG key
    become: true
    shell: >
      wget -O- https://download.docker.com/linux/ubuntu/gpg
      | gpg --dearmor
      > /usr/share/keyrings/docker.gpg

  - name: Get Ubuntu codename (for repository repository)
    shell: lsb_release -cs
    register: ubuntu_codename

  - name: Install docker repository
    apt_repository:
      repo: >
        deb [signed-by=/usr/share/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable
      state: present
    # when: docker_key_fingerprint_verified.rc == 0  # Just in case
    register: docker_repository_installed

  - name: Uninstall *unofficial* Docker distribution from APT iff Docker repo was newly added
    become: true
    apt:
      name:
        - docker.io
        - docker-compose
        - docker.doc
        - podman-docker
        - containerd
        - containerd.io
        - runc
      state: absent
    when: docker_repository_installed.changed

  - name: Install docker
    become: true
    apt:
      update_cache: yes
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
      state: latest

  - name: Add default user to `docker` group, so we can use docker w/o sudo
    become: true
    user:
      name: "{{ ansible_user }}"
      groups: "{{ ansible_user }},docker"

  # Other APT packages
  # ------------------
  - name: install other common packages from apt
    become: true
    apt:
      name:
        - unzip
        - gnupg
        - software-properties-common
        - curl
        - make
        - openjdk-11-jdk
        - gh # github cli
      state: latest

  - name: Remove dependencies no longer needed
    apt:
      autoremove: yes
      purge: true

  - name: Clear local repo of downloaded packages
    apt:
      clean: yes


  # AWS CLI
  # -------
  - name: Make sure we don't have v1 of AWS CLI installed
    become: true
    apt:
      name:
        - awscli
      state: absent

  - name: Download AWS CLI v2, if it's not already downloaded
    unarchive:
      src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
      dest: /home/{{ ansible_user }}/bin/
      # `creates` makes sure download is skipped if folder already exists
      creates: /home/{{ ansible_user }}/bin/aws/
      remote_src: yes
    register: aws_cli_download

  - name: Install AWS CLI v2, if it was downloaded
    become: true
    # Using the `update` flag so install does not fail in case it has been installed outside of Ansible.
    shell: bash /home/{{ ansible_user }}/bin/aws/install --update
    when: aws_cli_download.changed


  # Databricks CLI
  # --------------
  - name: Install /databricks CLI, if it doesn't exist
    become: true
    # Using the `update` flag so install does not fail in case it has been installed outside of Ansible.
    shell: databricks -v || ( curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh )


# todo:
# - copy dotfiles (incl mypy, pylint, etc)
# - Install python packages that should go into main environment: wheel, mypy, black, pipenv, poetry, pandas-stubs. Use  install --user? Pipenv? wheel?
# - pip install --upgrade pip?
# - pypy --install-types?
